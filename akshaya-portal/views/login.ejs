<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login - Service Saathi</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    /* Optional: Add a little extra transition for smoothness */
    input, button {
      transition: all 0.2s ease-in-out;
    }
    /* Ensure button height doesn't collapse when text is removed */
    #loginButton span {
      display: inline-block; /* Keep span taking space */
    }
    /* Hide spinner initially */
    #loginButton .spinner {
       display: none;
    }
    /* Show spinner when button has 'loading' class */
    #loginButton.loading .spinner {
       display: inline-block;
    }
    /* Hide text when button has 'loading' class */
    #loginButton.loading .button-text {
       visibility: hidden; /* Hide text but keep space */
    }
  </style>
</head>
<body class="flex items-center justify-center min-h-screen px-4 bg-gradient-to-br from-blue-50 via-white to-blue-100">
  <div class="bg-white p-8 sm:p-10 rounded-xl shadow-lg w-full max-w-md">
    <div class="text-center mb-6">
      <svg class="w-16 h-16 mx-auto text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path></svg>
    </div>

    <h2 class="text-2xl sm:text-3xl font-bold mb-6 sm:mb-8 text-center text-gray-800">Service Saathi Login</h2>

    <form id="loginForm" novalidate> <div class="mb-5">
        <label class="block text-gray-700 mb-2 font-medium" for="username">Mobile Number</label>
        <input type="text" id="username" name="username" required placeholder="Enter your mobile number" inputmode="tel" class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500">
      </div>

      <div class="mb-5">
        <label class="block text-gray-700 mb-2 font-medium" for="password">Password</label>
        <input type="password" id="password" name="password" required placeholder="Enter your password" class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500">
      </div>

      <div id="errorMessage" class="text-red-600 text-sm mb-4 min-h-[1.25rem]" aria-live="assertive"> </div>

      <div class="flex items-center justify-end mb-6">
         <a href="/forgot-password" class="text-sm text-blue-600 hover:underline">Forgot Password?</a>
      </div>

      <button type="submit" id="loginButton" class="w-full relative bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition duration-200 flex items-center justify-center">
         <svg class="spinner animate-spin -ml-1 mr-3 h-5 w-5 text-white flex items-center justify-center" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
             <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
             <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
         </svg>
         <span class="button-text">Login</span>
      </button>
    </form>

    <div class="mt-6 text-center">
      <p class="text-gray-600 text-sm">Don't have an account? <a href="/signup" class="text-blue-600 hover:underline font-semibold">Sign Up</a></p>
    </div>
  </div>

  <script>
    const loginForm = document.getElementById('loginForm');
    const usernameInput = document.getElementById('username');
    const passwordInput = document.getElementById('password');
    const errorMessageDiv = document.getElementById('errorMessage');
    const loginButton = document.getElementById('loginButton');
    const buttonText = loginButton.querySelector('.button-text');

    // Function to show/hide loader
    const setLoading = (isLoading) => {
        loginButton.disabled = isLoading;
        if (isLoading) {
            loginButton.classList.add('loading');
        } else {
            loginButton.classList.remove('loading');
        }
    };

    // Function to display errors
    const showError = (message) => {
        errorMessageDiv.innerHTML = message; // Allow HTML for signup link
        errorMessageDiv.style.display = 'block';
    };

    // Function to clear errors
    const clearError = () => {
        errorMessageDiv.textContent = '';
        errorMessageDiv.style.display = 'none';
    };

    // Clear error on input
    usernameInput.addEventListener('input', clearError);
    passwordInput.addEventListener('input', clearError);

    loginForm.addEventListener('submit', async (e) => {
      e.preventDefault(); // Prevent default form submission
      clearError(); // Clear previous errors

      const username = usernameInput.value.trim();
      const password = passwordInput.value; // No trim for password

      // --- Validation ---
      let isValid = true;
      if (username === '') {
          showError('Mobile number is required.');
          isValid = false;
      } else if (!/^\d+$/.test(username)) { // Basic check for digits only
          showError('Mobile number must contain only digits.');
          isValid = false;
      }
      // Add length check if needed: else if (username.length !== 10) { showError('Mobile number must be 10 digits.'); isValid = false;}

      if (isValid && password === '') { // Check password only if username is valid so far
          showError('Password is required.');
          isValid = false;
      } 
      if (!isValid) {
          return; // Stop submission if validation fails
      }
      // --- End Validation ---


      setLoading(true); // Show loader and disable button

      const data = { username, password };

      try {
        const response = await fetch('/api/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });

        // Try parsing JSON regardless of status code, as error details might be in the body
        let result;
        try {
            result = await response.json();
        } catch (jsonError) {
            // Handle cases where response is not JSON (e.g., server error page)
            console.error('Failed to parse JSON response:', jsonError);
            result = { error: `Server returned non-JSON response (Status: ${response.status})` };
        }


        if (response.ok) {
          // Login successful - Redirect (loader will stop implicitly on page change)
          if (result.role === 'admin') {
            window.location.href = '/admin-dashboard';
          } else {
            window.location.href = '/dashboard';
          }
          // No need to call setLoading(false) here as the page redirects
        } else {
          // Login failed - display error message from API response
          if (result && result.error === 'User does not exist') {
             // Use innerHTML carefully to include the link
             showError('Login failed: User does not exist. Please <a href="/signup" class="text-blue-600 hover:underline font-semibold">Sign Up</a>.');
          } else {
             showError('Login failed: ' + (result?.error || `Server error (Status: ${response.status})`));
          }
          setLoading(false); // Hide loader and enable button
        }
      } catch (error) {
          // Network or other fetch errors
          console.error('Login request failed:', error);
          showError('Login failed: Could not connect to server.');
          setLoading(false); // Hide loader and enable button
      }
    });
  </script>
</body>
</html>