<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Service Saathi Dashboard</title>
  <!-- Tailwind + DaisyUI -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: '#6366F1',     // Indigo 500
            secondary: '#3B82F6',   // Sky 500
            accent: '#22D3EE',      // Cyan 400
            'bg-light': '#F9FAFB',  // Light gray
          }
        }
      },
      daisyui: {
        themes: [
          {
            calmblue: {
              primary: '#6366F1',
              secondary: '#3B82F6',
              accent: '#22D3EE',
              neutral: '#F9FAFB',
              'base-100': '#FFFFFF',
              'base-200': '#F3F4F6',
              'base-300': '#E5E7EB',
              info: '#3ABFF8',
              success: '#36D399',
              warning: '#FBBD23',
              error: '#F87272',
            },
          },
        ],
      }
    }
  </script>
  <link href="https://cdn.jsdelivr.net/npm/daisyui@5" rel="stylesheet" type="text/css" />
  <link rel="stylesheet" href="/css/timeWeather.css">
</head>
<body class="bg-bg-light text-gray-800 transition-all duration-300">
  <!-- Sidebar -->
  <aside class="fixed top-0 left-0 h-screen w-56 bg-gradient-to-b from-primary to-secondary shadow-md z-50">
    <div class="flex flex-col justify-between h-full">
      <div class="p-6">
        <h1 class="text-2xl font-bold text-white">Service Saathi</h1>
      </div>
      <nav class="flex-1 px-4">
        <ul class="space-y-3">
          <li>
            <a href="/dashboard" class="flex items-center space-x-3 p-3 rounded-lg text-white hover:bg-white/20 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l9-9 9 9m-3 7v-4H6v4" />
              </svg>
              <span>Home</span>
            </a>
          </li>
          <li>
            <a href="/service" class="flex items-center space-x-3 p-3 rounded-lg text-white hover:bg-white/20 transition">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
              </svg>              
              <span>Service</span>
            </a>
          </li>
          <li>
            <a href="/contact" class="flex items-center space-x-3 p-3 rounded-lg text-white hover:bg-white/20 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 8V7a2 2 0 00-2-2H5a2 2 0 00-2 2v1m18 0v8a2 2 0 01-2 2H5a2 2 0 01-2-2V8m18 0L12 13 3 8" />
              </svg>
              <span>Contact Us</span>
            </a>
          </li>
        </ul>
      </nav>
    </div>
  </aside>
  <!-- Top Navbar -->
  <nav class="fixed top-0 left-56 right-0 bg-base-100 shadow-md py-4 px-6 flex justify-between items-center z-40">
    <div class="flex items-center space-x-4">
      <h2 class="text-xl font-semibold text-gray-700">
        Welcome back, <span class="text-primary"><%=user.pName%></span> ðŸ‘‹
      </h2>
    </div>
    <div class="flex items-center space-x-4">
      <div class="dropdown dropdown-end">
        <label tabindex="0" class="btn btn-ghost btn-circle avatar">
          <div class="w-10 h-10 rounded-full flex items-center justify-center text-black">
            <img src="/icons/user-male-circle--v1.png" alt="User Avatar" class="w-full h-full object-cover"/>
          </div>
        </label>
        <div tabindex="0" class="mt-3 p-2 shadow menu menu-sm dropdown-content bg-base-100 rounded-box w-52">
          <!-- Custom Dropdown Card -->
          <div>
            <ul>
              <li>               
                <p class="hover:text-[#6161f9] active:bg-white">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z" />
                  </svg>
                  User Profile
                </p>
              </li>
              <li>
                <p class="hover:text-[#6161f9] active:bg-white">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 5.25a3 3 0 0 1 3 3m3 0a6 6 0 0 1-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1 1 21.75 8.25Z" />
                  </svg>                  
                  Change Password
                </p>
              </li>
            </ul>
            <div class="border-t-[1.5px] border-[#dfdfe1]"></div>
            <ul>
              <li>
                <p class="hover:text-[#f04545] active:bg-white">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 9V5.25A2.25 2.25 0 0 1 10.5 3h6a2.25 2.25 0 0 1 2.25 2.25v13.5A2.25 2.25 0 0 1 16.5 21h-6a2.25 2.25 0 0 1-2.25-2.25V15m-3 0-3-3m0 0 3-3m-3 3H15" />
                  </svg>                  
                  Logout
                </p>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </nav>  
  <!-- Main Content -->
  <div class="flex ml-56 pt-20 bg-bg-light min-h-screen">
    <div class="container mx-auto p-6">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 h-full">
        <!-- Container 1: Weather Card -->
        <div class="col-span-1 space-y-4">
          <div class="h-full flex flex-col">
            <div class="space-y-4 flex-1 overflow-y-auto">
              <div class="card">
                <section class="info-section">
                  <div class="background-design">
                    <div class="circle"></div>
                    <div class="circle"></div>
                    <div class="circle"></div>
                  </div>
                  <div class="left-side">
                    <div class="weather">
                      <div id="weather-icon">
                        <!-- Dynamic Weather Icon -->
                      </div>
                      <div id="weather-condition">Loading...</div>
                    </div>
                    <div class="temperature" id="current-temperature">--Â°</div>
                    <div class="range" id="temperature-range">--Â°/--Â°</div>
                  </div>
                  <div class="right-side">
                    <div>
                      <div class="hour text-3xl" id="current-time">--:--</div>
                      <div class="date text-xl" id="current-date">-- --</div>
                    </div>
                    <div class="city text-lg" id="city-name">Loading...</div>
                  </div>
                </section>
                <section class="days-section" id="forecast-section">
                  <!-- Dynamic Forecast Buttons -->
                </section>
              </div>
            </div>
          </div>
        </div>
        <!-- Container 2: Cards Section -->
        <div class="col-span-1 space-y-4">
          <div class="space-y-4">
            <div class="bg-white rounded-xl shadow-md p-4 hover:shadow-xl transition min-h-[220px]">Card 1</div>
          </div>
        </div>
        <!-- Container 3: Cards Section -->
        <div class="row-span-2 space-y-4" id="container-3">
          <div class="space-y-4">
            <div class="bg-white rounded-xl shadow-md p-4 hover:shadow-xl transition min-h-[180px]" id="card-3">Card 3</div>
            <div class="bg-white rounded-xl shadow-md p-4 hover:shadow-xl transition min-h-[220px]" id="card-4">Card 4</div>
          </div>
        </div>
        <!-- Container 4: Spanning Columns 2 and 3 -->
        <div class="col-span-2 space-y-4" id="container-4">
          <div class="bg-white rounded-xl shadow-md p-4 hover:shadow-xl transition min-h-[250px]" id="card-5">Card 5</div>
        </div>
      </div>
    </div>
  </div>
  <!-- Scripts -->
  <script>
    // Fetch weather data dynamically using WeatherAPI
    async function fetchWeatherData(city = "Ernakulam") {
      const apiKey = "92918a91522544dbbe3154544251404"; // Replace with your WeatherAPI key
      const apiUrl = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city}&aqi=no`;
      try {
        const response = await fetch(apiUrl);
        if (!response.ok) throw new Error("Failed to fetch weather data");
        const data = await response.json();
        // Update DOM with fetched data
        document.getElementById("weather-condition").textContent = data.current.condition.text;
        document.getElementById("current-temperature").textContent = `${Math.round(data.current.temp_c)}Â°`;
        document.getElementById("temperature-range").textContent = `--Â°/--Â°`; // Range will be updated by forecast data
        document.getElementById("city-name").textContent = data.location.name;
        // Set weather icon dynamically
        const iconUrl = data.current.condition.icon;
        document.getElementById("weather-icon").innerHTML = `<img src="https:${iconUrl}" alt="Weather Icon" class="w-12 h-12">`;
        // Fetch forecast data
        fetchForecastData(city);
      } catch (error) {
        console.error("Error fetching weather data:", error);
        document.getElementById("weather-condition").textContent = "Error";
        document.getElementById("current-temperature").textContent = "--Â°";
        document.getElementById("temperature-range").textContent = "--Â°/--Â°";
        document.getElementById("city-name").textContent = "City Not Found";
      }
    }

    // Fetch forecast data dynamically
    async function fetchForecastData(city = "Ernakulam") {
      const apiKey = "92918a91522544dbbe3154544251404"; // Replace with your WeatherAPI key
      const apiUrl = `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${city}&days=4&aqi=no`;
      try {
        const response = await fetch(apiUrl);
        if (!response.ok) throw new Error("Failed to fetch forecast data");
        const data = await response.json();
        // Extract forecast for the next 4 days
        const forecastSection = document.getElementById("forecast-section");
        forecastSection.innerHTML = ""; // Clear previous forecast
        data.forecast.forecastday.forEach((dayData) => {
          const date = new Date(dayData.date);
          const day = date.toLocaleDateString("en-US", { weekday: "short" });
          const temp = Math.round(dayData.day.avgtemp_c);
          const iconUrl = dayData.day.condition.icon;
          const button = document.createElement("button");
          button.innerHTML = `
            <span class="day">${day}</span>
            <span class="icon-weather-day">
              <img src="https:${iconUrl}" alt="Weather Icon" class="w-6 h-6">
            </span>
            <span>${temp}Â°</span>
          `;
          forecastSection.appendChild(button);
        });
        // Update temperature range (min/max) for the first day
        const firstDay = data.forecast.forecastday[0];
        const maxTemp = Math.round(firstDay.day.maxtemp_c);
        const minTemp = Math.round(firstDay.day.mintemp_c);
        document.getElementById("temperature-range").textContent = `${maxTemp}Â°/${minTemp}Â°`;
      } catch (error) {
        console.error("Error fetching forecast data:", error);
      }
    }

    // Update current time and date dynamically
    function updateDateTime() {
      const now = new Date();
      const hours = String(now.getHours()).padStart(2, "0");
      const minutes = String(now.getMinutes()).padStart(2, "0");
      const day = now.toLocaleDateString("en-US", { weekday: "short" });
      const month = now.toLocaleDateString("en-US", { month: "short" });
      const date = now.getDate();
      document.getElementById("current-time").textContent = `${hours}:${minutes}`;
      document.getElementById("current-date").textContent = `${day} ${month} ${date}`;
    }

    // Dynamically adjust the height of Card 3 and Card 4
    function adjustDoughnutHeights() {
      const container3 = document.getElementById("container-3");
      const card4 = document.getElementById("card-4");

      // Get dimensions of the parent container
      const parentRect = container3.getBoundingClientRect();
      const parentHeight = parentRect.height;

      // Calculate total height of existing cards
      let occupiedHeight = 0;
      Array.from(container3.children).forEach(child => {
        occupiedHeight += child.getBoundingClientRect().height;
      });

      // Calculate remaining space
      const remainingSpace = parentHeight - occupiedHeight;

      // Adjust the height of Card 3 and Card 4
      if (remainingSpace > 0) {
        // Calculate the new height for Card 3 and Card 4
        const newHeight = 220+remainingSpace// Ensure a minimum height of 180px

        card4.classList.forEach((className) => {
          if (className.startsWith("min-h-")) {
            card4.classList.remove(className);
          }
        });
      
        card4.classList.add(`min-h-[${newHeight}px]`);
      } else {
        console.log("Not enough space to adjust card heights.");
      }
    }

    // Dynamically adjust the height of Card 3 and Card 4
    function adjustLineHeights() {
      const container4 = document.getElementById("container-4");
      const card5 = document.getElementById("card-5");

      // Get dimensions of the parent container
      const parentRect = container4.getBoundingClientRect();
      const parentHeight = parentRect.height;

      // Calculate total height of existing cards
      let occupiedHeight = 0;
      Array.from(container4.children).forEach(child => {
        occupiedHeight += child.getBoundingClientRect().height;
      });

      // Calculate remaining space
      const remainingSpace = parentHeight - occupiedHeight + 36;

      // Adjust the height of Card 3 and Card 4
      if (remainingSpace > 0) {
        // Calculate the new height for Card 3 and Card 4
        const newHeight = 250+remainingSpace// Ensure a minimum height of 180px

        card5.classList.forEach((className) => {
          if (className.startsWith("min-h-")) {
            card5.classList.remove(className);
          }
        });
      
        card5.classList.add(`min-h-[${newHeight}px]`);
      } else {
        console.log("Not enough space to adjust card heights.");
      }
    }

    // Initialize the app
    function init() {
      fetchWeatherData(); // Fetch weather data for a default city
      updateDateTime(); // Update time and date
      setInterval(updateDateTime, 1000); // Update time every second
      setInterval(fetchWeatherData, 3600000); // Update Weather every hour

      // Adjust card heights on page load and window resize
      adjustDoughnutHeights();
      window.addEventListener("resize", adjustDoughnutHeights);
      adjustLineHeights();
      window.addEventListener("resize", adjustLineHeights);
    }

    // Start the app
    init();
  </script>
</body>
</html>