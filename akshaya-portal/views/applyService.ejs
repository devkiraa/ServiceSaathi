<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Apply for Service - Document Capture</title>
  <!-- Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Inter Font -->
  <link href="https://rsms.me/inter/inter.css" rel="stylesheet" />
  <!-- Cropper.js CSS -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.css" rel="stylesheet">
  <style>
    body { font-family: 'Inter', sans-serif; }
    #cameraPreview {
      width: 100%;
      max-height: 70vh; 
      object-fit: cover;
      background-color: #222;
    }
    #cropImageContainer {
      max-height: 70vh;
      overflow: hidden;
    }
    #cropImage { display: block; max-width: 100%; }
    .hidden { display: none; }
  </style>
</head>
<body class="bg-black text-white min-h-screen flex flex-col items-center justify-center p-4">
  
  <div id="cameraContainer" class="relative w-full max-w-md mx-auto">
    <video id="cameraPreview" autoplay playsinline class="w-full object-cover rounded"></video>
    <div class="absolute inset-0 pointer-events-none flex items-center justify-center">
      <div class="absolute inset-0 bg-black bg-opacity-30 rounded"></div>
    </div>
    <button id="flashBtn" class="absolute top-4 right-4 bg-gray-800 bg-opacity-70 px-3 py-1 rounded text-sm z-10" title="Toggle Flash" hidden>
      Flash Off
    </button>
  </div>
  
  <div id="cropContainer" class="w-full max-w-md mx-auto mt-4 hidden">
    <p class="text-center text-sm text-gray-300 mb-2">Adjust the selection to crop the document.</p>
    <div id="cropImageContainer" class="mb-2 bg-gray-900">
      <img id="cropImage" alt="Captured document to crop" />
    </div>
    <div class="flex justify-around mt-2">
      <button id="cancelCropBtn" class="bg-gray-600 px-4 py-2 rounded">Cancel Crop</button>
      <button id="confirmCropBtn" class="bg-blue-600 px-4 py-2 rounded">Confirm Crop</button>
    </div>
  </div>
  
  <div id="instructionContainer" class="mt-4 text-center max-w-md mx-auto">
    <h2 id="docLabel" class="text-xl font-bold"></h2>
    <p id="docHint" class="text-sm text-gray-300"></p>
  </div>
  
  <div id="controlContainer" class="flex justify-between w-full max-w-md mt-4 px-4">
    <button id="backBtn" class="bg-gray-600 px-4 py-2 rounded disabled:opacity-50" onclick="prevStep()" disabled>
      Back
    </button>
    <button id="nextBtn" class="bg-blue-600 px-4 py-2 rounded">
      Capture
    </button>
  </div>
  
  <input type="file" id="fileInput" accept="image/*" capture="environment" class="hidden"/>
  
  <script id="requiredDocumentsData" type="application/json">
    <%- JSON.stringify(serviceRequest.requiredDocuments) %>
  </script>
  
  <!-- Cropper.js JS -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.js"></script>
  
  <script>
    // Global Variables
    const serviceRequestId = "<%= serviceRequest._id %>";
    const requiredDocuments = JSON.parse(document.getElementById('requiredDocumentsData').textContent || '[]');
    let currentStep = 0;
    const totalSteps = requiredDocuments.length;
  
    // DOM Elements
    const cameraContainer = document.getElementById('cameraContainer');
    const cameraPreview   = document.getElementById('cameraPreview');
    const docLabel        = document.getElementById('docLabel');
    const docHint         = document.getElementById('docHint');
    const backBtn         = document.getElementById('backBtn');
    const nextBtn         = document.getElementById('nextBtn');
    const flashBtn        = document.getElementById('flashBtn');
    const instructionContainer = document.getElementById('instructionContainer');
    const controlContainer = document.getElementById('controlContainer');
    // Cropper elements
    const cropContainer   = document.getElementById('cropContainer');
    const cropImage       = document.getElementById('cropImage');
    const confirmCropBtn  = document.getElementById('confirmCropBtn');
    const cancelCropBtn   = document.getElementById('cancelCropBtn');
  
    // State Variables
    let videoStream = null;
    let videoTrack = null;
    let flashEnabled = false;
    let imageBlob = null; // Final (cropped) image blob for current step
    let originalBlobUrl = null; // URL of the initially captured (uncropped) image
    let cropperInstance = null;
  
    // Initialize camera
    async function initCamera() {
      try {
        videoStream = await navigator.mediaDevices.getUserMedia({
          video: { facingMode: "environment" },
          audio: false
        });
        cameraPreview.srcObject = videoStream;
        await cameraPreview.play();
        cameraPreview.onloadedmetadata = () => {
          console.log(`Camera resolution: ${cameraPreview.videoWidth}x${cameraPreview.videoHeight}`);
          videoTrack = videoStream.getVideoTracks()[0];
          checkFlashSupport();
        };
      } catch (err) {
        console.error("Camera error:", err);
        docLabel.textContent = "Camera Error";
        docHint.textContent = "Could not access camera.";
        nextBtn.disabled = true;
        flashBtn.hidden = true;
        cameraContainer.classList.add('hidden');
      }
    }
  
    function checkFlashSupport() {
      if (!videoTrack) return;
      try {
        const capabilities = videoTrack.getCapabilities();
        flashBtn.hidden = !capabilities.torch;
      } catch(err) {
        console.error("Flash support check error:", err);
        flashBtn.hidden = true;
      }
    }
  
    async function toggleFlash() {
      if (!videoTrack || !videoTrack.getCapabilities().torch) return;
      try {
        flashEnabled = !flashEnabled;
        await videoTrack.applyConstraints({ advanced: [{ torch: flashEnabled }] });
        flashBtn.textContent = flashEnabled ? "Flash On" : "Flash Off";
      } catch (err) {
        console.error("Flash toggle failed:", err);
      }
    }
    flashBtn.addEventListener("click", toggleFlash);
  
    // Render document step instructions
    function renderStep() {
      if (totalSteps === 0) {
        docLabel.textContent = "No documents required";
        docHint.textContent = "";
        controlContainer.style.display = 'none';
        return;
      }
      const doc = requiredDocuments[currentStep];
      docLabel.textContent = `Capture ${doc.name}`;
      docHint.textContent  = `Position the document, capture, then adjust the crop.`;
      backBtn.disabled = currentStep === 0;
      nextBtn.textContent = "Capture";
    }
  
    // Capture & crop flow
    nextBtn.onclick = async function() {
      nextBtn.disabled = true;
      nextBtn.textContent = "Capturing...";
      flashBtn.hidden = true;
  
      const capturedBlob = await capturePhoto();
      if (capturedBlob) {
        if (originalBlobUrl) URL.revokeObjectURL(originalBlobUrl);
        originalBlobUrl = URL.createObjectURL(capturedBlob);
        cropImage.src = originalBlobUrl;
  
        // Switch to crop UI
        cameraContainer.classList.add("hidden");
        controlContainer.classList.add("hidden");
        instructionContainer.classList.add("hidden");
        cropContainer.classList.remove("hidden");
  
        cropImage.onload = () => {
          if (cropperInstance) {
            cropperInstance.destroy();
          }
          cropperInstance = new Cropper(cropImage, {
            aspectRatio: 0,
            viewMode: 1,
            background: false,
            autoCropArea: 0.9,
            zoomable: false,
          });
          nextBtn.disabled = false;
          nextBtn.textContent = "Capture";
          renderStep();
        };
        cropImage.onerror = () => {
          console.error("Error loading image into cropper.");
          // Instead of alert, update the instruction text
          docHint.textContent = "Failed to load captured image. Please try again.";
          resetToCamera();
        };
      } else {
        docHint.textContent = "Failed to capture photo. Please try again.";
        nextBtn.disabled = false;
        renderStep();
        flashBtn.hidden = !videoTrack?.getCapabilities().torch;
      }
    };
  
    async function capturePhoto() {
      if (!cameraPreview.srcObject || !cameraPreview.videoWidth) {
        console.error("Video stream not ready.");
        return null;
      }
      const canvas = document.createElement('canvas');
      canvas.width = cameraPreview.videoWidth;
      canvas.height = cameraPreview.videoHeight;
      const ctx = canvas.getContext('2d');
      ctx.drawImage(cameraPreview, 0, 0, canvas.width, canvas.height);
  
      try {
        const blob = await new Promise((resolve, reject) => {
          canvas.toBlob(blob => {
            if (blob) resolve(blob);
            else reject(new Error("Canvas to Blob conversion failed"));
          }, 'image/jpeg', 0.9);
        });
        console.log("Photo captured (uncropped), size:", (blob.size / 1024).toFixed(2), "KB");
        return blob;
      } catch (error) {
        console.error("Error capturing photo:", error);
        return null;
      }
    }
  
    // Crop actions
    confirmCropBtn.onclick = function() {
      confirmCropBtn.disabled = true;
      cancelCropBtn.disabled = true;
      confirmCropBtn.textContent = 'Processing...';
      if (!cropperInstance) return;
      cropperInstance.getCroppedCanvas().toBlob(async (blob) => {
        if (blob) {
          imageBlob = blob;
          console.log("Cropped blob size:", (imageBlob.size / 1024).toFixed(2), "KB");
          cleanupCropper();
  
          const doc = requiredDocuments[currentStep];
          const filename = `${doc.name.replace(/[^a-z0-9]/gi, '_')}_${Date.now()}.jpg`;
          const docFile = new File([imageBlob], filename, { type: 'image/jpeg' });
          requiredDocuments[currentStep].file = docFile;
          console.log(`Confirmed cropped file for ${doc.name}:`, docFile.name);
          imageBlob = null;
  
          if (currentStep < totalSteps - 1) {
            currentStep++;
            resetToCamera();
            renderStep();
          } else {
            await submitDocuments();
          }
        } else {
          console.error("Cropped blob is null.");
          docHint.textContent = "Image crop failed. Please try again.";
          confirmCropBtn.disabled = false;
          cancelCropBtn.disabled = false;
          confirmCropBtn.textContent = 'Confirm Crop';
        }
      }, 'image/jpeg', 0.9);
    };
  
    cancelCropBtn.onclick = function() {
      console.log("Crop cancelled.");
      cleanupCropper();
      resetToCamera();
    };
  
    function cleanupCropper() {
      if (cropperInstance) {
        cropperInstance.destroy();
        cropperInstance = null;
      }
      if (originalBlobUrl) {
        URL.revokeObjectURL(originalBlobUrl);
        originalBlobUrl = null;
        cropImage.src = '';
      }
      cropContainer.classList.add("hidden");
      confirmCropBtn.disabled = false;
      cancelCropBtn.disabled = false;
      confirmCropBtn.textContent = 'Confirm Crop';
    }
  
    function resetToCamera() {
      cleanupCropper();
      cropContainer.classList.add("hidden");
      cameraContainer.classList.remove("hidden");
      controlContainer.classList.remove("hidden");
      instructionContainer.classList.remove("hidden");
  
      if (!videoStream) {
        initCamera().then(() => {
          flashBtn.hidden = !videoTrack?.getCapabilities().torch;
        });
      } else {
        flashBtn.hidden = !videoTrack?.getCapabilities().torch;
      }
    }
  
    function stopVideoStream() {
      if (videoStream) {
        videoStream.getTracks().forEach(track => track.stop());
        console.log("Video stream stopped.");
      }
      videoStream = null;
      videoTrack = null;
      if (cameraPreview) cameraPreview.srcObject = null;
    }
  
    function prevStep() {
      if (currentStep > 0) {
        currentStep--;
        if (requiredDocuments[currentStep]) {
          requiredDocuments[currentStep].file = null;
        }
        resetToCamera();
        renderStep();
      }
    }
  
    async function submitDocuments() {
      console.log("Preparing to submit documents...");
      const formData = new FormData();
      let filesAttached = 0;
  
      requiredDocuments.forEach((doc) => {
        if (doc.file instanceof File) {
          formData.append(`files`, doc.file, doc.file.name);
          filesAttached++;
        } else {
          console.warn(`No valid file captured for document: ${doc.name}`);
        }
      });
  
      if (filesAttached === 0 && totalSteps > 0) {
        docHint.textContent = "No documents captured to submit.";
        resetToCamera();
        renderStep();
        return;
      }
  
      if (filesAttached < totalSteps) {
        if (!confirm(`Only ${filesAttached} out of ${totalSteps} documents captured. Submit anyway?`)) {
          resetToCamera();
          renderStep();
          return;
        }
      }
  
      instructionContainer.classList.remove('hidden');
      docLabel.textContent = "Submitting...";
      docHint.textContent = "Please wait.";
      controlContainer.classList.add('hidden');
      cameraContainer.classList.add('hidden');
      cropContainer.classList.add('hidden');
      stopVideoStream();
  
      try {
        const response = await fetch(`/api/upload-documents/${serviceRequestId}`, {
          method: 'POST',
          body: formData
        });
  
        if (response.ok) {
          const result = await response.json();
          console.log("Upload successful:", result);
          docLabel.textContent = "Upload Complete";
          docHint.textContent = "Your documents have been submitted successfully.";
        } else {
          let errorMsg = `Upload failed: ${response.status}`;
          try {
            const result = await response.json();
            errorMsg += ` - ${result.error || result.message || JSON.stringify(result)}`;
          } catch (e) {
            errorMsg += ` - ${response.statusText}`;
          }
          console.error("Upload failed:", errorMsg);
          alert(errorMsg);
          currentStep = 0;
          resetToCamera();
          renderStep();
        }
      } catch (error) {
        console.error("Error during submission:", error);
        alert("A network error occurred while uploading. Please try again.");
        currentStep = 0;
        resetToCamera();
        renderStep();
      }
    }
  
    window.addEventListener('beforeunload', stopVideoStream);
    document.addEventListener('DOMContentLoaded', () => {
      if (totalSteps === 0) {
        renderStep();
        stopVideoStream();
      } else {
        initCamera();
        renderStep();
      }
    });
  </script>
</body>
</html>
