<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <%# Use documentType in the title if available %>
  <title><%= serviceRequest ? serviceRequest.documentType : "Document" %> Details - Service Saathi</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/daisyui@5" rel="stylesheet" type="text/css" />
  <script src="/js/tailwindConfig.js"></script> <%# Assuming this configures Tailwind/DaisyUI themes %>
  <script src="/js/profileIcon.js"></script> <%# Assuming this handles profile icon logic %>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
  <style>
    /* Style for copy icon (can be removed if not used elsewhere) */
    .copy-icon::before {
      content: 'ðŸ“„'; /* Basic emoji representation */
      cursor: pointer; display: inline-block; margin-left: 5px;
    }
    .copy-icon:hover::before { opacity: 0.7; }
  </style>
</head>
<body class="bg-bg-light text-gray-800 transition-all duration-300">

  <aside class="fixed top-0 left-0 h-screen w-56 bg-gradient-to-b from-primary to-secondary shadow-md z-50">
    <div class="flex flex-col justify-between h-full">
      <div class="p-6">
        <h1 class="text-2xl font-bold text-white">Service Saathi</h1>
      </div>
      <nav class="flex-1 px-4">
        <ul class="space-y-3">
          <li><a href="/" class="block text-white hover:bg-white hover:text-primary rounded px-3 py-2">Home</a></li>
          <li><a href="/services" class="block text-white hover:bg-white hover:text-primary rounded px-3 py-2">Services</a></li>
          </ul>
      </nav>
      </div>
  </aside>

  <nav class="fixed top-0 left-56 right-0 bg-base-100 shadow-md py-2.5 px-6 flex justify-between items-center z-40 h-16">
    <%# MODIFIED: Display documentType instead of "Customer Details" %>
    <h2 class="text-xl font-semibold text-gray-700 truncate pr-4">Document applying for
      <%= serviceRequest ? serviceRequest.documentType : "Service Request Details"  %>
    </h2>
    <div class="flex items-center space-x-4">
      <div id="profile-icon-container">
         <span class="text-gray-600">Loading Profile...</span>
      </div>
    </div>
  </nav>

  <div class="flex ml-56 pt-16 bg-bg-light min-h-screen"> <%# Adjusted pt to match navbar height %>
    <div class="container mx-auto p-6">
      <div class="max-w-5xl mx-auto bg-white shadow-md rounded-md p-6">

        <%# REMOVED: Customer Details Section (h2 for name and the gray box) %>

        <h2 class="text-2xl font-semibold text-gray-800 mb-4">Uploaded Documents & Extracted Data</h2>
        <div class="overflow-x-auto">
          <table class="w-full border-collapse border border-gray-300 mb-6 text-sm">
            <thead>
              <tr class="bg-gray-100">
                <th class="border border-gray-300 p-2 text-center">Document Name</th>
                <th class="border border-gray-300 p-2 text-center">Extracted Data</th>
                <th class="border border-gray-300 p-2 text-center">View</th>
                <th class="border border-gray-300 p-2 text-center">Download</th>
              </tr>
            </thead>
            <tbody>
              <% if (!serviceRequest || !serviceRequest.requiredDocuments || serviceRequest.requiredDocuments.length === 0) { %>
                <tr><td colspan="4" class="text-center p-4 text-gray-500">No documents uploaded yet.</td></tr>
              <% } else { %>
                <% serviceRequest.requiredDocuments.forEach(function(doc) { %>
                  <tr class="hover:bg-gray-50 align-top">
                    <td class="border p-2 text-center font-medium"><%= doc.name %></td>
                    <td class="border p-2 text-left">
                      <%# Display extractedFields if available %>
                      <% if (doc.extractedFields && typeof doc.extractedFields === 'object' && Object.keys(doc.extractedFields).length > 0) { %>
                        <ul class="list-disc pl-5 space-y-1">
                          <% for (const [label, value] of Object.entries(doc.extractedFields)) { %>
                            <li><strong class="font-semibold"><%= label %>:</strong> <%= value %></li>
                          <% } %>
                        </ul>
                      <% } else { %>
                        <span class="text-gray-400 italic">Pending extraction</span>
                      <% } %>
                    </td>
                    <td class="border p-2 text-center align-middle">
                      <%# Display image preview %>
                      <% if (doc.base64Data) { %>
                        <img
                          src="data:image/jpeg;base64,<%= doc.base64Data %>" <%# Assuming JPEG %>
                          alt="Preview of <%= doc.name %>"
                          class="h-20 md:h-24 mx-auto rounded-md shadow hover:scale-105 transition-transform duration-200 cursor-pointer object-contain"
                          onclick="openImageModal('data:image/jpeg;base64,<%= doc.base64Data %>')"
                        />
                      <% } else { %>
                        <span class="text-gray-400">No Preview</span>
                      <% } %>
                    </td>
                    <td class="border p-2 text-center align-middle">
                      <%# Display download link %>
                      <% if (doc.base64Data) { %>
                        <a
                          href="/download/<%= serviceRequest._id %>/<%= doc._id %>"
                          class="inline-block bg-primary text-white px-3 py-1 rounded hover:bg-secondary transition-colors duration-200 text-xs md:text-sm"
                          title="Download <%= doc.name %>"
                        >Download</a>
                      <% } else { %>
                        <span class="text-gray-400">â€“</span>
                      <% } %>
                    </td>
                  </tr>
                <% }); %>
              <% } %>
            </tbody>
          </table>
        </div>

        <div class="mt-8 pt-6 border-t border-gray-200 flex flex-col sm:flex-row justify-end items-center gap-3">
          <label for="overall-status" class="mr-2 font-semibold text-gray-700">Overall Request Status:</label>
          <select id="overall-status" class="border rounded p-2 bg-white shadow-sm focus:ring-primary focus:border-primary">
             <% const currentStatus = serviceRequest ? serviceRequest.status : 'Pending'; %>
             <option value="Pending"    <%= currentStatus === 'Pending'    ? 'selected' : '' %>>Pending</option>
             <option value="Processing" <%= currentStatus === 'Processing' ? 'selected' : '' %>>Processing</option>
             <option value="Completed"  <%= currentStatus === 'Completed'  ? 'selected' : '' %>>Completed</option>
             <option value="Approved"   <%= currentStatus === 'Approved'   ? 'selected' : '' %>>Approved</option>
             <option value="Rejected"   <%= currentStatus === 'Rejected'   ? 'selected' : '' %>>Rejected</option>
             <option value="Reupload Required"   <%= currentStatus === 'reupload_required'   ? 'selected' : '' %>>Reupload Required</option>
             <%# Add other valid statuses from your enum if necessary %>
           </select>
           <button
             onclick="updateRequestStatus('<%= serviceRequest ? serviceRequest._id : '' %>')"
             class="ml-3 bg-primary text-white px-4 py-2 rounded hover:bg-secondary transition-colors duration-200 shadow"
             <%= !serviceRequest ? 'disabled' : '' %>
           >Save Status</button>
        </div>

      </div></div> </div> <div id="imageModal" class="fixed inset-0 hidden bg-black bg-opacity-75 justify-center items-center z-[100] p-4" onclick="closeImageModal()">
    <div class="relative max-w-full max-h-full" onclick="event.stopPropagation()">
       <button onclick="closeImageModal()" class="absolute -top-8 right-0 text-white text-3xl font-bold hover:text-gray-300" title="Close Image">&times;</button>
       <img id="modalImage" class="block max-h-[90vh] max-w-[90vw] rounded-md shadow-lg object-contain"/>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.js"></script>
  <script>
    // === Modal Functions ===
    const imageModal = document.getElementById('imageModal');
    const modalImage = document.getElementById('modalImage');
    function openImageModal(src) { /* ... (same as before) ... */
       if (modalImage && imageModal) {
         modalImage.src = src;
         imageModal.classList.remove('hidden');
         imageModal.classList.add('flex');
       }
    }
    function closeImageModal() { /* ... (same as before) ... */
       if (imageModal) {
         imageModal.classList.add('hidden');
         imageModal.classList.remove('flex');
         modalImage.src = '';
       }
    }
    document.addEventListener('keydown', (event) => { /* ... (same as before) ... */
        if (event.key === 'Escape' && !imageModal.classList.contains('hidden')) {
            closeImageModal();
        }
    });

    // === Copy to Clipboard Function === (Can be kept or removed if not used elsewhere)
    function copyToClipboard(text) { /* ... (same as before) ... */
      if (navigator.clipboard && text) {
        navigator.clipboard.writeText(text).then(() => {
          alert("Copied: " + text);
        }).catch(err => {
          console.error('Failed to copy text: ', err);
          alert("Failed to copy text.");
        });
      } else {
          alert("Clipboard API not available or no text to copy.");
      }
    }

    // === Update Status Function ===
    async function updateRequestStatus(requestId) { /* ... (same as before) ... */
      if (!requestId) {
          alert('Error: Request ID is missing.'); return;
      }
      const statusDropdown = document.getElementById('overall-status');
      const selectedStatus = statusDropdown ? statusDropdown.value : null;
      if (!selectedStatus) {
          alert('Error: Could not read selected status.'); return;
      }
      console.log(`Updating status for ${requestId} to ${selectedStatus}`);
      try {
        const response = await fetch(`/update-request-status/${requestId}`, {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ status: selectedStatus })
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.message || `Server responded with status ${response.status}`);
        }
        alert(data.message || 'Request status updated successfully!');
      } catch (error) {
        console.error('Error updating request status:', error);
        alert(`Error updating request status: ${error.message}`);
      }
    }
  </script>
</body>
</html>